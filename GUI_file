"""
    SCRIPT MUST RUN IN ADMINISTRATOR MODE
    script will automatically run in admin mode 
"""
# ensures that the script is ran as an administrator
import ctypes, sys, os

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    
    except:
        return False

if not is_admin():
    # Relaunch script as admin
    script = os.path.abspath(sys.argv[0])
    params = " ".join([f'"{arg}"' for arg in sys.argv[1:]])
    ctypes.windll.shell32.ShellExecuteW(
        None, "runas", sys.executable, f'"{script}" {params}', None, 1)
    
    sys.exit()

#================================================================================================
from tkinter import *
from tkinter import ttk
from InteractiveWindowsScript_1 import *
import json

# used for removing widgets when the screen changes
""" Used to clear the screen of all widgets when screens switch """
widgets = []
def clear_widgets():
    for widget in widgets:
        widget.grid_forget()

    widgets.clear()

""" Main canvas setup """

main_window = Tk()
main_window.title("---Interactive Windows Tool---")
main_window.geometry("1000x800")

main_window.columnconfigure(0, weight=1)
main_window.columnconfigure(1, weight=1)

""" Functions for different screens """

# Used for testing 
# Eventually needs deleted or commented out 
def test_screen():
    """ Button commands for the buttons on the test_screen """
    widget_commands = {
        "back": home_screen
    }

    """ creates an instance for all the widgets needed """
    test = reused_widgets(main_window, "file", widget_commands)
    test.setup_widgets()

""" Screen for service configuration """
def services_config_screen():
    def clear_result_box():
        services_config_widgets.result_box.delete("1.0", END)

    widget_commands = {
        "back": home_screen,
        "clear_results": clear_result_box
        
    }

    services_config_widgets = reused_widgets(main_window, "service_config", widget_commands)
    services_config_widgets.setup_widgets()

""" Screen for user configuration """
def user_config_screen():
    def clear_result_box():
        user_config_widgets.result_box.delete("1.0", END)

    def sort_users():
        admins, non_admins = get_local_users()
        clear_result_box()

        user_config_widgets.add_results_result_box("=====================================")
        user_config_widgets.add_results_result_box("Administrators:")
        user_config_widgets.add_results_result_box(admins)
        user_config_widgets.add_results_result_box("=====================================")
        user_config_widgets.add_results_result_box("Standard Users:")
        user_config_widgets.add_results_result_box(non_admins)
        user_config_widgets.add_results_result_box("=====================================")

    def delete_user():
        username = user_config_widgets.entrys["ask_for_user_input"].get()

        results = remove_user(username)

        user_config_widgets.add_results_result_box(results)

    """ Does not currently work, need to finish on the backend """
    def disable_user():
        username = user_config_widgets.entrys["ask_for_user_input"].get()

    def create_user():
        username = user_config_widgets.entrys["ask_for_user_input"].get()
        password = user_config_widgets.entrys["ask_for_password_input"].get()

        result = add_user(username, password)

        user_config_widgets.add_results_result_box(result)

    """ Button commands for the buttons on the user_config_screen """
    widget_commands = {
        "back": home_screen,
        "sort_users": sort_users,
        "delete_user": delete_user,
        "disable_user": disable_user,
        "add_user": create_user,
        "clear_results": clear_result_box

    }

    user_config_widgets = reused_widgets(main_window, "user_config", widget_commands)
    user_config_widgets.setup_widgets()

""" Screen for all of the file searching capabilities """
def file_searching_screen():
    def clear_result_box():
        file_searching_widgets.result_box.delete("1.0", END)

    def file_type_search():
        directory = file_searching_widgets.entrys["ask_for_directory_input"].get()
        file_types = file_searching_widgets.entrys["ask_for_filetype_input"].get()

        results = searchDirectory(directory, file_types)

        file_searching_widgets.add_results_result_box(results)

    def ext_key_word_search():
        directory = file_searching_widgets.entrys["ask_for_directory_input"].get()
        keyword = file_searching_widgets.entrys["ask_for_keyword_input"].get()

        results = keywordSearchExternal(directory, keyword)

        file_searching_widgets.add_results_result_box(results)
    
    def int_key_word_search():
        directory = file_searching_widgets.entrys["ask_for_directory_input"].get()
        keyword = file_searching_widgets.entrys["ask_for_keyword_input"].get()

        results = keywordSearchInternal(directory, keyword)

        file_searching_widgets.add_results_result_box(results)

    """ Button commands for the buttons on the file_searching_screen """
    widget_commands = {
        "back": home_screen,
        "type_search": file_type_search,
        "ext_key_word": ext_key_word_search,
        "int_key_word": int_key_word_search,
        "clear_results": clear_result_box

    }

    file_searching_widgets = reused_widgets(main_window, "file", widget_commands)
    file_searching_widgets.setup_widgets()

""" Screen to give assistance on how to use each part of the script """
def help_screen():
    def get_help():
        info_needed = help_screen_widgets.combo.get()
        try:
            help_screen_widgets.add_results_result_box(help_screen_data[info_needed])
        
        except:
            help_screen_widgets.add_results_result_box("No info on specified topic.")

    """ Button commands for the buttons on the help_screen """
    widget_commands = {
        "back": home_screen,
        "search": get_help,
        "combo_options": ["File Searching", "User Configuration", "3"]

    }

    """ opens a json file that holds all of the text for the help screen """
    with open("help_screen_info.json", "r") as file:
        help_screen_data = json.load(file)

    """ Creates an instance of the help screen widgets and sets them up """
    help_screen_widgets = reused_widgets(main_window, "help", widget_commands)
    help_screen_widgets.setup_widgets()
    """ Adds the intro to the help screen to the result box """
    help_screen_widgets.add_results_result_box(help_screen_data["intro"])

""" Creates the home screen """
def home_screen():
    widget_commands = {
        "help": help_screen,
        "user": user_config_screen,
        "file": file_searching_screen,
        "service": services_config_screen,
        "test": test_screen
        
    }
    """ Creates an instance of the home screen widgets and sets them up """
    home_screen_widgets = reused_widgets(main_window, "home_screen", widget_commands=widget_commands)
    home_screen_widgets.setup_widgets()

""" Class for all widgets used in GUI """

class reused_widgets:
    def __init__(self, window, type, widget_commands):
        self.type = type
        self.widget_commands = widget_commands 
        self.window = window
        self.entrys = {}

        """ Widget configurations for each screen """
        """
        type = type of widget
        type2 = type of second widget (only used for things like entrys since they need a label to explain their purpose)
        text = text on widget
        position = position of widget (left, center, right)
        position1 = row number, if wanted
        command = command for widgets like buttons
        """
        self.widget_configs = {
            "help": [
                {"type": "button", "text": "Home Screen", "position": "center", "command": self.widget_commands.get("back")},
                {"type": "combo", "options": self.widget_commands.get("combo_options")},
                {"type": "button", "text": "Show Results", "position": "center", "command": self.widget_commands.get("search")}, 
                {"type": "result"}

            ],
            "file": [
                {"type": "title", "text": "File Searching"},
                {"type": "button", "text": "Home Screen", "position": "center", "command": self.widget_commands.get("back")},
                {"type": "label", "text": "Input Directory: ", 
                    "type2": "entry", "entry_name": "ask_for_directory_input"}, 
                {"type": "label", "text": "Input Keyword: ", 
                    "type2": "entry", "entry_name": "ask_for_keyword_input"},
                {"type": "label", "text": "Input File Types: ",
                    "type2": "entry", "entry_name": "ask_for_filetype_input"},
                {"type": "button", "text": "File Type Search", "command": self.widget_commands.get("type_search")},
                {"type": "button", "text": "External File Keyword Search", "command": self.widget_commands.get("ext_key_word")},
                {"type": "result"},
                {"type": "button", "text": "Clear Results Box", "command": self.widget_commands.get("clear_results")}

            ],
            "user_config": [
                {"type": "title", "text": "User Configuration"},
                {"type": "button", "text": "Home Screen", "position": "center", "command": self.widget_commands.get("back")},
                {"type": "button", "text": "Sort Users", "position": "center", "command": self.widget_commands.get("sort_users")},
                {"type": "label", "text": "Input User", 
                    "type2": "entry", "entry_name": "ask_for_user_input"},
                {"type": "label", "text": "Input User Password (Only needed if adding a user)", 
                    "type2": "entry", "entry_name": "ask_for_password_input"},
                {"type": "button", "text": "Add User", "command": self.widget_commands.get("add_user")},
                {"type": "button", "text": "Delete User", "position": "center", "position1": 8, "command": self.widget_commands.get("delete_user")},
                {"type": "button", "text": "Disable User", "position": "left", "position1": 8, "command": self.widget_commands.get("disable_user")},
                {"type": "result"},
                {"type": "button", "text": "Clear Result Box", "command": self.widget_commands.get("clear_results")}
                
            ],
            "service_config": [
                {"type": "title", "text": "Service Configuration"},
                {"type": "button", "text": "Home Screen", "position": "center", "command": self.widget_commands.get("back")},
                {"type": "treeview", "headings": ["1", "2", "3"]}
                
            ],
            "home_screen": [
                {"type": "title", "text": "Interactive Windows Tool"},
                {"type": "button", "text": "Help", "command": self.widget_commands.get("help")},
                {"type": "button", "text": "User Configuration", "command": self.widget_commands.get("user")},
                {"type": "button", "text": "File Searches", "command": self.widget_commands.get("file")},
                {"type": "button", "text": "Service Configuration", "command": self.widget_commands.get("service")},
                {"type": "button", "text": "TEST", "command": self.widget_commands.get("test")}

            ]
        }

    """ Creates all of the widgets depending on the configuration from self.widget_configs """
    def setup_widgets(self):
        clear_widgets()

        configs = self.widget_configs.get(self.type, [])
        row_index = 4

        for config in configs:
            true_type = config["type"].lower()
            
            """ Creates a title """
            if true_type == "title":
                title = ttk.Label(main_window, text=config["text"], font=("Arial", 14, "bold"))
                title.grid(column=0, columnspan=2, row=1)
                widgets.append(title)
            
            """ Creates a label """
            if true_type == "label":
                label = ttk.Label(self.window, text=config["text"])
                label.grid(row=row_index, column=0, padx=10, pady=5)
                widgets.append(label)
                
                """ Creates a text box that can be typed in, only allowed when a label is placed. Label is needed for a description of what the text box is used for """
                if config["type2"] == "entry":
                    entry = ttk.Entry(self.window)
                    entry.grid(row=row_index, column=1, padx=10, pady=5)
                    widgets.append(entry)

                    self.entrys[config["entry_name"]] = entry

                row_index += 1
            
            """ Creates a button """
            if true_type == "button":
                button = ttk.Button(self.window, text=config["text"], command=config["command"])

                if config.get("position") == "center":
                    if config.get("position1"):
                        button.grid(row=config.get("position1"), column=0, columnspan=2, padx=10, pady=5)

                    else:
                        button.grid(row=row_index, column=0, columnspan=2, padx=10, pady=5)

                elif config.get("position") == "left":
                    if config.get("position1"):
                        button.grid(row=config.get("position1"), column=0, padx=10, pady=5)

                    else: 
                        button.grid(row=row_index, column=0, padx=10, pady=5)

                else: 
                    button.grid(row=row_index, column=1, padx=10, pady=5)

                widgets.append(button)
                row_index += 1
            """ Creates a drop down menu, only one selection is allowed """
            #expand the self.widget_configs with a parameter to allow multiple selections if needed
            if true_type == "combo":
                options = config["options"]

                self.combo = ttk.Combobox(self.window, values=options)
                self.combo.current(0)
                self.combo.grid(row=row_index, column=0, columnspan=2)
                
                widgets.append(self.combo)
                row_index += 1

            """ Creates a result box to display results """
            if true_type == "result":
                self.result_box = Text(self.window, wrap="word", height=30, width=100)
                self.result_box.grid(row=row_index, column=0, columnspan=2, sticky="nsew")
                
                widgets.append(self.result_box)
                row_index += 1

            if true_type == "treeview":
                self.treeview = ttk.Treeview(self.window, columns=config.get("headings"), show="headings")
                self.treeview.grid(row=row_index, column=0, columnspan=2, padx=10, pady=5)
                
                for heading in config.get("headings"):
                    self.treeview.heading(heading, text=heading)

                widgets.append(self.treeview)

    """ Allows results to be added to the result box """
    def add_results_result_box(self, message):
        if isinstance(message, list):
            for item in message:
                self.result_box.insert(END, "\n" + item)

        else:
            self.result_box.insert(END, "\n" + message)

    def add_results_treeview(self, message):
        if isinstance(message, dict):
            for item in message:
                self.treeview.insert(
                    
                )

    def get_entry(self, entry_name):
        entry = self.entrys.get(entry_name)

        if entry:
            return entry.get
        
        else:
            return None
        

home_screen()

main_window.mainloop()
